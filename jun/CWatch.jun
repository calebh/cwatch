module CWatch
open(Prelude)
include("<bluefruit.h>")

#
BLEUuid timeUuid(UUID16_SVC_CURRENT_TIME);
BLEService rawTimeService(timeUuid);

BLEUuid dayDateTimeUuid(UUID16_CHR_DAY_DATE_TIME);
BLECharacteristic rawDayDateTimeCharacterstic(dayDateTimeUuid);

BLEUuid dayOfWeekUuid(UUID16_CHR_DAY_OF_WEEK);
BLECharacteristic rawDayOfWeek(dayOfWeekUuid);
#

type dayDateTimeBLE = packed { month : uint8; day : uint8; year : uint32; hours : uint8; minutes : uint8; seconds : uint8 }

let timeService = (
    var p : rawpointer;
    #p = (void *) &rawTimeService;#;
    Ble:service(p)
)

let dayDateTimeCharacterstic = (
    var p : rawpointer;
    #p = (void *) &rawDayDateTimeCharacterstic;#;
    Ble:characterstic(p)
)

let dayOfWeekCharacterstic = (
    var p : rawpointer;
    #p = (void *) &rawDayOfWeek;#;
    Ble:characterstic(p)
)

fun setup() = (
    Arcada:arcadaBegin();
    Arcada:displayBegin();
    Arcada:setBacklight(255u8);
    Arcada:createDoubleBuffer();
    Ble:bluefruitBegin();
    Ble:bluefruitPeriphSetConnInterval(9u16, 16u16);
    Ble:bluefruitSetTxPower(4i8);
    Ble:bluefruitSetName("CWatch");
    Ble:beginService(timeService);
    Ble:beginCharacterstic(dayDateTimeCharacterstic);
    Ble:beginCharacterstic(dayOfWeekCharacterstic);
    Ble:bluefruitAdvertisingAddFlags(Ble:bleGapAdvFlagsLeOnlyGeneralDiscMode);
    Ble:bluefruitAdvertisingAddTxPower();
    Ble:bluefruitAdvertisingAddAppearance(Ble:appearanceGenericWatch);
    Ble:bluefruitAdvertisingAddService(timeService);
    Ble:bluefruitAdvertisingAddName();
    Ble:bluefruitAdvertisingRestartOnDisconnect(true);
    Ble:bluefruitAdvertisingSetInterval(32u16, 244u16);
    Ble:bluefruitAdvertisingSetFastTimeout(30u16);
    Ble:bluefruitAdvertisingStart(0u16)
)

let pink = Color:rgb{r=0xFCu8; g=0x5Cu8; b=0x7Du8}
let purpleBlue = Color:rgb{r=0x6Au8; g=0x82u8; b=0xFBu8}

type month = january | february | march | april | may | june | july | august | september | october | november | december

type dayOfWeek = sunday | monday | tuesday | wednesday | thursday | friday | saturday

type datetime = { month : month; day : uint8; year : uint32; hours : uint8; minutes : uint8; seconds : uint8; dayOfWeek : dayOfWeek }

fun isLeapYear(y : uint32) =
    if y mod 4 != 0 then
        false
    elif y mod 100 != 0 then
        true
    elif y mod 400 == 0 then
        true
    else
        false
    end

fun daysInMonth(y : uint32, m : month) =
    case m of
    | january() => 31u8
    | february() =>
        if isLeapYear(y) then
            29u8
        else
            28u8
        end
    | march() => 31u8
    | april() => 30u8
    | may() => 31u8
    | june() => 30u8
    | july() => 31u8
    | august() => 31u8
    | september() => 30u8
    | october() => 31u8
    | november() => 30u8
    | december() => 31u8
    end

fun nextMonth(m : month) =
    case m of
    | january() => february()
    | february() => march()
    | march() => april()
    | may() => june()
    | june() => july()
    | august() => august()
    | september() => october()
    | october() => november()
    | december() => january()
    end

fun nextDayOfWeek(dw) =
    case dw of
    | sunday() => monday()
    | monday() => tuesday()
    | tuesday() => wednesday()
    | wednesday() => thursday()
    | thursday() => friday()
    | friday() => saturday()
    | saturday() => sunday()
    end

fun dayOfWeekToCharList(dw : dayOfWeek) =
    case dw of
    | sunday() => 'Sun'
    | monday() => 'Mon'
    | tuesday() => 'Tue'
    | wednesday() => 'Wed'
    | thursday() => 'Thu'
    | friday() => 'Fri'
    | saturday() => 'Sat'
    end

fun monthToCharList(m : month) =
    case m of
    | january() => 'Jan'
    | february() => 'Feb'
    | march() => 'Mar'
    | april() => 'Apr'
    | may() => 'May'
    | june() => 'Jun'
    | july() => 'Jul'
    | august() => 'Aug'
    | september() => 'Sep'
    | october() => 'Oct'
    | november() => 'Nov'
    | december() => 'Dec'
    end

fun secondTick(d) = (
    let datetime {month=month; day=day; year=year; hours=hours; minutes=minutes; seconds=seconds; dayOfWeek=dayOfWeek} = d;
    let seconds1 = seconds + 1u8;
    let (seconds2, minutes1) =
        if seconds1 == 60u8 then
            (0u8, minutes + 1u8)
        else
            (seconds1, minutes)
        end;
    let (minutes2, hours1) =
        if minutes1 == 60u8 then
            (0u8, hours + 1u8)
        else
            (minutes1, hours)
        end;
    let (hours2, day1, dayOfWeek2) =
        if hours1 == 24u8 then
            (0u8, day + 1u8, nextDayOfWeek(dayOfWeek))
        else
            (hours1, day, dayOfWeek)
        end;
    let daysInCurrentMonth = daysInMonth(year, month);
    let (day2, (month2, year2)) =
        if day1 > daysInCurrentMonth then
            (
                1u8,
                case month of
                | december() =>
                    (january(), year + 1u8)
                | _ =>
                    (nextMonth(month), year)
                end
            )
        else
            (day1, (month, year))
        end;
    datetime {month=month2; day=day2; year=year2; hours=hours2; minutes=minutes2; seconds=seconds2; dayOfWeek=dayOfWeek2}
)

let clockTickerState = Time:state()
let clockState = ref datetime {month=september(); day=9; year=2020; hours=18; minutes=40; seconds=0; dayOfWeek=wednesday()}

fun loop() = (
    Gfx:drawVerticalGradient(0u16, 0u16, Arcada:displayWidth(), Arcada:displayHeight(), pink, purpleBlue);

    Time:every(1000u32, clockTickerState) |>
    Signal:foldP(fn (t, dt) -> secondTick(dt) end, clockState) |>
    Signal:latch(clockState) |>
    Signal:sink(fn (dt) -> (
        let datetime {month=month; day=day; year=year; hours=hours; minutes=minutes; seconds=seconds; dayOfWeek=dayOfWeek} = dt;

        // Convert 24 hour format to 12 hour format
        let displayHours : int32 =
            if hours == 0u8 then
                12u8
            elif hours > 12u8 then
                hours - 12u8
            else
                hours
            end;

        Gfx:setTextColor(Color:white);

        Gfx:setFont(Gfx:freeSans24());
        Gfx:setTextSize(1);
        
        // Construct the hours:minutes string
        let timeHourStr = CharList:i32ToCharList<;2>(displayHours);
        let timeHourStrColon = CharList:safeConcat(timeHourStr, ':');
        let minutesStr =
            if minutes < 10 then
                CharList:safeConcat('0', CharList:i32ToCharList<;1>(minutes))
            else
                CharList:i32ToCharList<;2>(minutes)
            end;
        let timeStr = CharList:safeConcat(timeHourStrColon, minutesStr);

        // Move the cursor to the center of the screen
        let (_, _, w, h) = Gfx:getCharListBounds(0, 0, timeStr);
        Gfx:setCursor((Arcada:displayWidth() / 2) - (w / 2), (Arcada:displayHeight() / 2) + (h / 2));
        
        // Print the time
        Gfx:printCharList(timeStr);

        Gfx:setTextSize(1);
        Gfx:setFont(Gfx:freeSans9());

        // Determine if we are in AM or PM
        let ampm =
            if hours < 12 then
                'AM'
            else
                'PM'
            end;
        
        // Print the AM or PM
        let (_, _, w2, h2) = Gfx:getCharListBounds(0, 0, ampm);
        Gfx:setCursor((Arcada:displayWidth() / 2) - (w2 / 2), (Arcada:displayHeight() / 2) + (h / 2) + h2 + 5);
        Gfx:printCharList(ampm);

        // Construct the day of week, month day string
        // Example: Sun Apr 31
        let dateStr =
            CharList:safeConcat(
            CharList:safeConcat(
            CharList:safeConcat(
            CharList:safeConcat(
                dayOfWeekToCharList(dayOfWeek), ', '),
                monthToCharList(month)),
                ' '),
                CharList:i32ToCharList<;2>(day));

        // Draw the day string above the time
        let (_, _, w3, h3) = Gfx:getCharListBounds(0, 0, dateStr);
        Gfx:setCursor((Arcada:displayWidth() / 2) - (w3 / 2), (Arcada:displayHeight() / 2) - (h / 2) - 5);
        Gfx:printCharList(dateStr)
    ) end);

    Arcada:blitDoubleBuffer()
)
