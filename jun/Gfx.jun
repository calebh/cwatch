module Gfx
open(Prelude, Arcada, Color)
include("<Adafruit_GFX.h>")

fun fillScreen(c : rgb) = (
    let cPrime = rgbToRgb565(c);
    #arcada.getCanvas()->fillScreen(cPrime);#
)

fun drawPixel(x : int16, y : int16, c : rgb) = (
    let cPrime = rgbToRgb565(c);
    #arcada.getCanvas()->drawPixel(x, y, cPrime);#
)

fun drawFastHLine565(x : int16, y : int16, w : int16, c : uint16) =
    #arcada.getCanvas()->drawFastHLine(x, y, w, c);#

fun drawPixel565(x : uint16, y : uint16, c : uint16) = #arcada.getCanvas()->drawPixel(x, y, c);#

fun printCharList<;n>(cl : list<uint8; n>) =
    #arcada.getCanvas()->print((char *) &cl.data[0]);#

fun printString(s : string) =
    #arcada.getCanvas()->print(s);#

type align = centerHorizontally | centerVertically | centerBoth

fun centerCursor<;n>(x : int16, y : int16, align : align, cl : list<uint8; n>) = (
    let (_, _, w, h) = Gfx:getCharListBounds(0, 0, cl);
    case align of
    | centerHorizontally() => 
        Gfx:setCursor(x - (w / 2), y)
    | centerVertically() =>
        Gfx:setCursor(x, y - (h / 2))
    | centerBoth() =>
        Gfx:setCursor(x - (w / 2), y - (h / 2))
    end
)

fun setCursor(x : int16, y : int16) = #arcada.getCanvas()->setCursor(x, y);#

fun setTextColor(c : rgb) = (
    let cPrime = rgbToRgb565(c);
    #arcada.getCanvas()->setTextColor(cPrime);#
)

fun getCharListBounds<;n>(x : int16, y : int16, cl : list<uint8; n>) = (
    let mutable xret : int16 = 0u16;
    let mutable yret : int16 = 0u16;
    let mutable wret : uint16 = 0u16;
    let mutable hret : uint16 = 0u16;
    #arcada.getCanvas()->getTextBounds((const char *) &cl.data[0], x, y, &xret, &yret, &wret, &hret);#;
    (xret, yret, wret, hret)
)

fun setTextWrap(wrap : bool) = #arcada.getCanvas()->setTextWrap(wrap);#

fun setTextSize(size : uint8) = #arcada.getCanvas()->setTextSize(size);#

fun drawVerticalGradient(x0i : int16, y0i : int16, w : int16, h : int16, c1 : Color:rgb, c2 : Color:rgb) = (
    let dispW = Arcada:displayWidth();
    let dispH = Arcada:displayHeight();
    let x0 = Math:clamp(x0i, 0i16, dispW - 1i16);
    let y0 = Math:clamp(y0i, 0i16, dispH - 1u16);
    let ymax = y0i + h - 1i16;
    let y1 = Math:clamp(ymax, 0i16, dispH - 1i16);

    let rgb{r=r1; g=g1; b=b1} = c1;
    let rgb{r=r2; g=g2; b=b2} = c2;

    for y : int16 in y0 to y1 do (
        let weight1 = u16ToFloat(ymax - y) / h;
        let weight2 = 1.0f - weight1;
        let gradColor = Color:rgb{r=r1 * weight1 + r2 * weight2; g=g1 * weight1 + g2 * weight2; b=b1 * weight1 + g2 * weight2};
        let gradColor565 = Color:rgbToRgb565(gradColor);
        drawFastHLine565(x0, y, w, gradColor565)
    ) end
)